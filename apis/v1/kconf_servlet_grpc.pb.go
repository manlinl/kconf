// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: kconf_servlet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KConfServletClient is the client API for KConfServlet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KConfServletClient interface {
	GetVersionedConfig(ctx context.Context, in *GetVersionedConfigRequest, opts ...grpc.CallOption) (*VersionedConfig, error)
	WatchVersionedConfig(ctx context.Context, opts ...grpc.CallOption) (KConfServlet_WatchVersionedConfigClient, error)
}

type kConfServletClient struct {
	cc grpc.ClientConnInterface
}

func NewKConfServletClient(cc grpc.ClientConnInterface) KConfServletClient {
	return &kConfServletClient{cc}
}

func (c *kConfServletClient) GetVersionedConfig(ctx context.Context, in *GetVersionedConfigRequest, opts ...grpc.CallOption) (*VersionedConfig, error) {
	out := new(VersionedConfig)
	err := c.cc.Invoke(ctx, "/qeco.kconf.apis.v1.KConfServlet/GetVersionedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kConfServletClient) WatchVersionedConfig(ctx context.Context, opts ...grpc.CallOption) (KConfServlet_WatchVersionedConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &KConfServlet_ServiceDesc.Streams[0], "/qeco.kconf.apis.v1.KConfServlet/WatchVersionedConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &kConfServletWatchVersionedConfigClient{stream}
	return x, nil
}

type KConfServlet_WatchVersionedConfigClient interface {
	Send(*WatchVersionedConfigRequest) error
	Recv() (*WatchVersionedConfigResponse, error)
	grpc.ClientStream
}

type kConfServletWatchVersionedConfigClient struct {
	grpc.ClientStream
}

func (x *kConfServletWatchVersionedConfigClient) Send(m *WatchVersionedConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kConfServletWatchVersionedConfigClient) Recv() (*WatchVersionedConfigResponse, error) {
	m := new(WatchVersionedConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KConfServletServer is the server API for KConfServlet service.
// All implementations must embed UnimplementedKConfServletServer
// for forward compatibility
type KConfServletServer interface {
	GetVersionedConfig(context.Context, *GetVersionedConfigRequest) (*VersionedConfig, error)
	WatchVersionedConfig(KConfServlet_WatchVersionedConfigServer) error
	mustEmbedUnimplementedKConfServletServer()
}

// UnimplementedKConfServletServer must be embedded to have forward compatible implementations.
type UnimplementedKConfServletServer struct {
}

func (UnimplementedKConfServletServer) GetVersionedConfig(context.Context, *GetVersionedConfigRequest) (*VersionedConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionedConfig not implemented")
}
func (UnimplementedKConfServletServer) WatchVersionedConfig(KConfServlet_WatchVersionedConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchVersionedConfig not implemented")
}
func (UnimplementedKConfServletServer) mustEmbedUnimplementedKConfServletServer() {}

// UnsafeKConfServletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KConfServletServer will
// result in compilation errors.
type UnsafeKConfServletServer interface {
	mustEmbedUnimplementedKConfServletServer()
}

func RegisterKConfServletServer(s grpc.ServiceRegistrar, srv KConfServletServer) {
	s.RegisterService(&KConfServlet_ServiceDesc, srv)
}

func _KConfServlet_GetVersionedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KConfServletServer).GetVersionedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qeco.kconf.apis.v1.KConfServlet/GetVersionedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KConfServletServer).GetVersionedConfig(ctx, req.(*GetVersionedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KConfServlet_WatchVersionedConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KConfServletServer).WatchVersionedConfig(&kConfServletWatchVersionedConfigServer{stream})
}

type KConfServlet_WatchVersionedConfigServer interface {
	Send(*WatchVersionedConfigResponse) error
	Recv() (*WatchVersionedConfigRequest, error)
	grpc.ServerStream
}

type kConfServletWatchVersionedConfigServer struct {
	grpc.ServerStream
}

func (x *kConfServletWatchVersionedConfigServer) Send(m *WatchVersionedConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kConfServletWatchVersionedConfigServer) Recv() (*WatchVersionedConfigRequest, error) {
	m := new(WatchVersionedConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KConfServlet_ServiceDesc is the grpc.ServiceDesc for KConfServlet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KConfServlet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qeco.kconf.apis.v1.KConfServlet",
	HandlerType: (*KConfServletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersionedConfig",
			Handler:    _KConfServlet_GetVersionedConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchVersionedConfig",
			Handler:       _KConfServlet_WatchVersionedConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kconf_servlet.proto",
}
